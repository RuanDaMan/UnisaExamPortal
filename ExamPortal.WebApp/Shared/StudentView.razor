@using ExamPortal.Application.Shared.State
@using ExamPortal.Application.Shared.Dto
@using System.Text.Json

@inherits SharedComponent
<MudText Color="Color.Primary" Typo="Typo.h4">Student Login</MudText>

<MudGrid Style="padding-top: 25px">
    @* Number | Username *@
    <MudItem md="4"/>
    <MudItem md="4">
        <MudTextField @bind-Value="StudentNumber" Label="Student Number" Variant="Variant.Outlined" Margin="Margin.Dense"/>
    </MudItem>
    <MudItem md="4"/>

    @* Password *@
    <MudItem md="4"/>
    <MudItem md="4">
        <MudTextField InputType="InputType.Password" @bind-Value="Password" T="string" Label="Password" Variant="Variant.Outlined" Margin="Margin.Dense"/>
    </MudItem>
    <MudItem md="4"/>


    @* Actions *@
    <MudItem md="4"/>
    <MudItem md="4" Style="justify-content: space-between; display: flex">
        <MudButton Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Primary" OnClick="@(_ => ViewChanged.InvokeAsync(""))">Back</MudButton>
        <MudButton Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Secondary">Forgot Password?</MudButton>
        <MudButton Variant="Variant.Outlined" Size="Size.Medium" Color="Color.Success" OnClick="Authenticate">Sign In</MudButton>
    </MudItem>
    <MudItem md="4"/>

</MudGrid>

@code
{
    [Parameter]
    public string View { get; set; } = "";

    [Parameter]
    public EventCallback<string> ViewChanged { get; set; }

    [Inject]
    private IAuthStateProvider AuthStateProvider { get; set; } = default!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    private ILocalStorageService LocalStorage { get; set; } = default!;


    private int? StudentNumber { get; set; }
    private string Password { get; set; } = "";

    private async Task Authenticate()
    {
        try
        {
            var result = await AuthStateProvider.Authenticate((int)StudentNumber!, Password, UserType.Student);
            if (result.Valid)
            {
                await LocalStorage.SetItemAsync("CurrentUser", JsonSerializer.Serialize(result.User));
                NavigationManager.NavigateTo("/");
                return;
            }
            ShowError("User Authentication Failed");
        }
        catch (Exception e)
        {
            ShowError(e.Message, "Error Authenticating User");
        }
    }
}