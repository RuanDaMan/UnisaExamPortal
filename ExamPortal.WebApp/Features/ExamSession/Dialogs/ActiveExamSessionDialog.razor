@using ExamPortal.Application.Shared.Dto
@using ExamPortal.Features.ExamSession.Components
@using ExamPortal.Application.Repositories
@inherits SharedComponent

<MudDialog>
    <TitleContent>
        <MudGrid>
            <MudItem md="6">
                <MudText Typo="Typo.h4">Exam Session - @Session.ModuleCode</MudText>
            </MudItem>
            <MudItem md="6">
                <MudText Typo="Typo.h5" Align="Align.End">

                    <TimerComponent @ref="Timer"/>

                </MudText>
            </MudItem>
        </MudGrid>

    </TitleContent>
    <DialogContent>
        <MudContainer Style="width: 800px">
            @if (Loading)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
            }
            <MudGrid>
                <MudItem md="6">
                    <MudText>Module: @Session.ModuleDescription</MudText>
                    <MudText >Exam Ends: @Session.EndTime.ToString("yyyy-MM-dd HH:mm")</MudText>
                </MudItem>


                @if (Started && !Ended)
                {
                    <MudItem md="6">
                        <MudButton Size="Size.Small"
                                   EndIcon="@Icons.Filled.Download"
                                   Variant="Variant.Filled"
                                   Color="Color.Info"
                                   OnClick="@(_ => Download(ExamPaper))">
                            @ExamPaper
                        </MudButton>
                    </MudItem>
                    <MudItem md="12">
                        <FileUpload ExamFilesDirectory="StudentExamPapers" @ref="FileUpload" SavedChanged="@(saved => StudentFileSaved = saved)" ExamFileChanged="@(file => StudentExamFile = file)"/>
                    </MudItem>
                }

            </MudGrid>
        </MudContainer>

    </DialogContent>
    <DialogActions>

        <MudButton Disabled="Started" OnClick="Cancel">Cancel</MudButton>
        @if (!Started && !Ended)
        {
            <MudButton Color="Color.Primary" OnClick="Start">Start</MudButton>
        }
        @if (Started && !Ended)
        {
            <MudButton Color="Color.Primary" OnClick="SubmitExam">Submit</MudButton>
        }

    </DialogActions>
</MudDialog>

@code {

    FileUpload FileUpload;
    private bool StudentFileSaved { get; set; }
    private ExamFileDto StudentExamFile { get; set; } = new ExamFileDto();

    [Inject]
    private IExamPortalRepository Repository { get; set; } = default!;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public StudentModuleSessionDto Session { get; set; } = new StudentModuleSessionDto();

    [Inject]
    private IAuthStateProvider AuthState { get; set; } = default!;

    [Inject]
    IJSRuntime JsRuntime { get; set; } = default!;

    [Inject]
    IWebHostEnvironment Environment { get; set; } = default!;

    private CurrentUserDto CurrentUser => AuthState.GetCurrentUser();

    private bool Started { get; set; }
    private bool Ended { get; set; }
    private string ExamPaper { get; set; } = string.Empty;
    private bool Loading { get; set; }
    private string TransactionId { get; set; } = string.Empty;

    TimerComponent Timer;

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        Loading = true;
        var doesSessionExist = await Repository.CheckExistingStudentExamSession(Session.ModuleCode, CurrentUser.Number);


        if (doesSessionExist.Exist)
        {
            var hours = (DateTime.Now - (DateTime)doesSessionExist.StartTime!).TotalHours;
            if (hours >= 2 || DateTime.Now > Session.EndTime)
            {
                Ended = true;
                ShowError("Exam Session Already Ended", "Error Loading Exam Session");
                Loading = false;
            }
            else
            {
                await Start();
            }
        }
        else
        {
            Loading = false;
        }
        await base.OnInitializedAsync();
    }

    private async Task Start()
    {
        Loading = true;
        try
        {
            var examSession = await Repository.StartExamSession(Session.ModuleCode, CurrentUser.Number);

            ExamPaper = examSession.ExamPaper;
            TransactionId = examSession.TransactionId;
            const int defaultSeconds = 60 * 60 * 2;
            var studentSessionEndTime = examSession.StartTime.AddHours(2);
            if (studentSessionEndTime < Session.EndTime)
            {
                var timeLimit = (int)Math.Round(defaultSeconds - (DateTime.Now - examSession.StartTime).TotalSeconds, 0);
                StartTimer(timeLimit);
            }
            else
            {
                var timeLimit = (int)Math.Round((Session.EndTime - DateTime.Now).TotalSeconds, 0);
                StartTimer(timeLimit);
            }

            Started = true;
            Loading = false;
        }
        catch (Exception e)
        {
            ShowError(e.Message, "Error Starting Exam Session");
            Loading = false;
        }
    }

    private void StartTimer(int timeLimit)
    {
        Timer.StartTimer(timeLimit);
        Timer.ShowTimer = true;
    }

    private void StopTimer()
    {
        Timer.StopTimer();
    }

    private async Task Download(string fileName)
    {
        try
        {
            var path = Path.Combine(Environment.ContentRootPath, "ExamPapers", fileName);
            var content = await File.ReadAllBytesAsync(path);


            var attachmentSrc = $"data:application/octet-stream;base64,{Convert.ToBase64String(content)}";

            await JsRuntime.InvokeVoidAsync("downloadFromUrl", new
            {
                Url = attachmentSrc,
                FileName = fileName
            });
        }

        catch (Exception e)
        {
            ShowError(e.Message, "Error Downloading Attachment");
        }
    }

    private async Task SubmitExam()
    {
        if (!StudentFileSaved)
        {
            ShowError("Please upload your exam file!", "No File Uploaded");
            return;
        }
        StopTimer();
        await Repository.SubmitExamSession(TransactionId, Session.ModuleCode, CurrentUser.Number, $"{StudentExamFile.FileName}.pdf");
        ShowSuccess("Exam Saved Successfully");
        MudDialog.Close();
    }


}