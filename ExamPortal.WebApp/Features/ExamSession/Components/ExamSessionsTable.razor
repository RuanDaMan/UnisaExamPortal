@using ExamPortal.Application.Shared.Dto
@using ExamPortal.Application.Repositories
@inherits SharedComponent

<MudTable Items="@Sessions" Dense="true" Hover="true" Height="60vh" FixedHeader="true">

    <HeaderContent>
        <MudTh>Module</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Start</MudTh>
        <MudTh>End</MudTh>
        <MudTh>File</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd >@context.ModuleCode</MudTd>
        <MudTd >@context.ModuleDescription</MudTd>
        <MudTd >@context.StartDate.ToString("yyyy-MM-dd @ HH:mm")</MudTd>
        <MudTd >@context.EndDate.ToString("yyyy-MM-dd @ HH:mm")</MudTd>
        <MudTd>

            <MudButton Size="Size.Small" EndIcon="@Icons.Filled.Download" Variant="Variant.Filled" Color="Color.Info" OnClick="@(_ => Download(context.ExamPaperPdf))">@context.ExamPaperPdf</MudButton>
        </MudTd>

    </RowTemplate>
</MudTable>


@code {

    [Inject]
    private IExamPortalRepository Repository { get; set; } = default!;

    [Inject]
    IWebHostEnvironment Environment { get; set; } = default!;

    [Inject]
    IJSRuntime JsRuntime { get; set; } = default!;

    [Inject]
    private IAuthStateProvider AuthStateProvider { get; set; } = default!;

    private CurrentUserDto CurrentUser => AuthStateProvider.GetCurrentUser();
    

    private List<ExamSessionListItemDto> Sessions { get; set; } = new List<ExamSessionListItemDto>();

    protected override async Task OnInitializedAsync()
    {
        await LoadSessions();
    }

    private async Task LoadSessions()
    {
        try
        {
            Sessions = await Repository.AllExamSessions(CurrentUser.Number);
        }
        catch (Exception e)
        {
            ShowError(e.Message, "Error Loading Exam Sessions");
        }
    }

    private async Task Download(string fileName)
    {
        try
        {
            var path = Path.Combine(Environment.ContentRootPath, "ExamPapers", fileName);
            var content = await File.ReadAllBytesAsync(path);


            var attachmentSrc = $"data:application/octet-stream;base64,{Convert.ToBase64String(content)}";

            await JsRuntime.InvokeVoidAsync("downloadFromUrl", new
            {
                Url = attachmentSrc,
                FileName = fileName
            });
        }

        catch (Exception e)
        {
            ShowError($"File: {fileName} Not Found", "Error Downloading Attachment");
        }
    }

    private bool Filter(ExamSetupDto element)
    {
    // if (string.IsNullOrWhiteSpace(searchString))
    //     return true;
    // if (element.Sign.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //     return true;
    // if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //     return true;
    // if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
    //     return true;
    // return false;
        return false;
    }

}