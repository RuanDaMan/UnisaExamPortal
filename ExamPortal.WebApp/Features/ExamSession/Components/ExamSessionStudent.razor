@using ExamPortal.Application.Repositories
@using ExamPortal.Application.Shared.Dto
@using ExamPortal.Features.ExamSession.Dialogs
@inherits SharedComponent

<MudPaper Class="pa-4" Style="margin: auto" Width="80%">
    <MudContainer>
        <MudGrid>
            <MudItem md="12">
                <MudText Typo="Typo.h4">Exam Sessions For <MudText Color="Color.Info" Style="display: inline-block" Typo="Typo.h4">@CurrentUser.Name </MudText> | Student Number: <MudText Style="display: inline-block"  Color="Color.Info" Typo="Typo.h4"> @CurrentUser.Number</MudText> </MudText>
            </MudItem>
            @foreach (var session in ExamSessions)
            {
                <MudItem md="3">
                    <MudCard Outlined="true">

                        <MudCardContent>
                            <MudText Color="@(session.SessionActive ? Color.Primary : Color.Default)" Align="Align.Center" Typo="Typo.h4">@session.ModuleCode</MudText>
                            <MudText Align="Align.Center">@session.ModuleDescription</MudText>
                            <MudText Align="Align.Center" Typo="Typo.body2">@session.StartTime.ToString("yyyy-MM-dd") | @session.StartTime.ToString("HH:mm") - @session.EndTime.ToString("HH:mm")</MudText>

                        </MudCardContent>
                        <MudCardActions>
                            <MudButton OnClick="@(_ => OpenActiveSessionDialog(session))" Class="m-auto" Disabled="!session.SessionActive" Variant="Variant.Filled" Color="@(session.SessionActive ? Color.Success : Color.Default)">View Exam</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }

        </MudGrid>

    </MudContainer>
</MudPaper>

@code
{
    [Inject]
    private IExamPortalRepository Repository { get; set; } = default!;

    private List<StudentModuleSessionDto> ExamSessions { get; set; } = new List<StudentModuleSessionDto>();

    [Inject]
    private IAuthStateProvider StateProvider { get; set; } = default!;

    [Inject]
    private IDialogService DialogService { get; set; } = default!;

    private CurrentUserDto CurrentUser => StateProvider.GetCurrentUser();

    protected override async Task OnInitializedAsync()
    {
        await LoadExamSessions();
        await base.OnInitializedAsync();
    }

    private async Task LoadExamSessions()
    {
        try
        {
            ExamSessions = await Repository.GetStudentModuleSession(CurrentUser.Number);
        }
        catch (Exception e)
        {
            ShowError(e.Message, "Error Loading Exam Sessions");
        }
    }

    private void OpenActiveSessionDialog(StudentModuleSessionDto session)
    {
        var parameters = new DialogParameters() { { "Session", session } };
        var options = new DialogOptions() { DisableBackdropClick = true, MaxWidth = MaxWidth.Large};
        DialogService.Show<ActiveExamSessionDialog>($"", parameters, options);
    }
}