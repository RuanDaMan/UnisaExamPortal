@using ExamPortal.Application.Shared.Dto

@inherits SharedComponent;
<MudGrid>
    @if (!Uploaded)
    {
        <MudItem sm="6">

            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Filled.CloudUpload"
                       for="fileInput">
                Upload File
            </MudButton>

        </MudItem>

        <MudItem sm="6">
            <InputFile id="fileInput" OnChange="UploadFiles" accept="application/pdf" hidden/>
        </MudItem>
    }
    else
    {
        @if (!Saved)
        {
            <MudItem sm="6">
                <MudTextField Label="File Name" @bind-Value="ExamFilePaper.FileName" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText=".pdf"/>
            </MudItem>
            <MudItem sm="6">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveFile">Save</MudButton>
            </MudItem>
        }
        else
        {
            <MudItem sm="6">
                <MudText >@($"{ExamFilePaper.FileName}.pdf") </MudText>
            </MudItem>
            <MudItem sm="6">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Download">Download</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteFilePrompt">Delete</MudButton>
            </MudItem>
        }
    }
</MudGrid>

@code
{
    [Inject]
    IWebHostEnvironment Environment { get; set; } = default!;
    [Inject]
    IJSRuntime JsRuntime { get; set; } = default!;

    [Inject]
    IDialogService DialogService { get; set; } = default!;


    public ExamFileDto ExamFilePaper { get; set; } = new ExamFileDto();

    [Parameter]
    public EventCallback<ExamFileDto> ExamFileChanged { get; set; }

    readonly List<IBrowserFile> _files = new List<IBrowserFile>();

    private bool Loading { get; set; }
    private bool Uploaded { get; set; }
    public bool Saved { get; set; }

    [Parameter]
    public EventCallback<bool> SavedChanged { get; set; }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        Loading = true;


        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                await using var stream = file.OpenReadStream(1024 * 1024 * 100);
                var memoryStream = new MemoryStream();

                await stream.CopyToAsync(memoryStream);
                var extension = Path.GetExtension(file.Name);
                var fileName = file.Name[..^extension.Length];

                ExamFilePaper = new ExamFileDto()
                {
                    Bytes = memoryStream.ToArray(),
                    FileName = fileName
                };
                await ExamFileChanged.InvokeAsync(ExamFilePaper);
                Uploaded = true;
            }
            catch (Exception ex)
            {
                ShowError(ex.Message, $"File: {file.Name} Error: {ex.GetType()}");
            }
        }

        Loading = false;
    }

    private async Task SaveFile()
    {
        if (ExamFilePaper.FileName.Length == 0)
        {
            ShowError("Filename can't be empty");
            return;
        }
        var path = Path.Combine(Environment.ContentRootPath, "ExamPapers");
        FilePathCheck(path);
        path = Path.Combine(path, $"{ExamFilePaper.FileName}.pdf");
        await File.WriteAllBytesAsync(path, ExamFilePaper.Bytes);
        Saved = true;
        await SavedChanged.InvokeAsync(Saved);
    }

    private static void FilePathCheck(string? path)
    {
        if (!string.IsNullOrWhiteSpace(path))
            if (!File.Exists(path))
            {
                var i = Directory.CreateDirectory(path);
            }
    }


    private async Task DeleteFilePrompt()
    {
        var dlgParams = new DialogParameters() { ["ContentText"] = $"Are you sure you want to delete this file? {ExamFilePaper.FileName}" };
        var dlg = DialogService.Show<DeleteConfirmation>("", dlgParams);
        var result = await dlg.Result;
        if (!result.Cancelled)
        {
            DeleteFile();
        }
    }

    private void DeleteFile()
    {
        try
        {
            var path = Path.Combine(Environment.ContentRootPath, "ExamPapers", $"{ExamFilePaper.FileName}.pdf");

            File.Delete(path);

            ShowSuccess($"'{ExamFilePaper.FileName}' deleted.");
            ExamFilePaper = new ExamFileDto();
            Uploaded = false;
            Saved = false;
            ExamFileChanged.InvokeAsync(ExamFilePaper);
            SavedChanged.InvokeAsync(Saved);
        }
        catch (Exception e)
        {
            ShowError("An error occurred while attempting to delete a file:\n" + e.Message, "Error deleting file.");
        }
    }

    private async Task Download()
    {
        try
        {
            var path = Path.Combine(Environment.ContentRootPath, "ExamPapers", $"{ExamFilePaper.FileName}.pdf");
            var content = await File.ReadAllBytesAsync(path);


            var attachmentSrc = $"data:application/octet-stream;base64,{Convert.ToBase64String(content)}";

            await JsRuntime.InvokeVoidAsync("downloadFromUrl", new
            {
                Url = attachmentSrc,
                FileName = $"{ExamFilePaper.FileName}.pdf"
            });
        }

        catch (Exception e)
        {
            ShowError(e.Message, "Error Downloading Attachment");
        }
    }

    public async void Clear()
    {
        Saved = false;
        ExamFilePaper = new ExamFileDto();
        Uploaded = false;
        await SavedChanged.InvokeAsync(false);
        await ExamFileChanged.InvokeAsync(ExamFilePaper);
        StateHasChanged();
    }


}